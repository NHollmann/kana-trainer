{"version":3,"sources":["components/Kana.js","components/Typer.js","utils/HiraganaUtil.js","utils/Mapping.js","utils/RandomUtil.js","components/Hiragana.js","App.js","index.js"],"names":["Kana","react_default","a","createElement","className","this","props","value","Component","Typer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","text","keyName","e","handle","newText","slice","onEnter","locked","setState","es","onKeyDown","bind","HiraganaUtil","n","i","u","o","ka","ki","ku","ke","ko","sa","shi","su","se","so","ta","chi","tsu","te","to","na","ni","nu","ne","no","ha","hi","fu","he","ho","ma","mi","mu","me","mo","ya","yu","yo","ra","ri","ru","re","ro","wa","wi","we","wo","Mapping","map","key","reverseMap","transcript","console","warn","kana","RandomUtil","list","weightTotal","distribution","length","push","selector","Math","random","calculateWeights","getRandomIdByDistribution","floor","learningBlocks","Hiragana","defaultStart","transcription","solved","hiragana","characters","JSON","parse","localStorage","getItem","_unused","positive","negative","getRandomKana","symbol","getByTranscription","message","_this2","id","findIndex","x","totalSolved","block","_unused2","newKanas","concat","setItem","stringify","reduce","acc","weights","counter","getRandomIdByWeights","str","kanaSolved","getRandom","src_components_Kana","src_components_Typer","onTyperEnter","App","components_Hiragana","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.72accca4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Kana.css';\n\nclass Kana extends Component {\n    render() {\n        return (\n            <div className=\"kana\">\n                <p>\n                    {this.props.value}\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default Kana;\n","import React, { Component } from 'react';\nimport Hotkeys from 'react-hot-keys';\nimport './Typer.css';\n\nclass Typer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: '',\n        };\n    }\n\n    onKeyDown(keyName, e, handle) {\n        let newText = this.state.text;\n        if (keyName === 'backspace') {\n            newText = newText.slice(0, -1);\n        } else if (keyName === 'enter') {\n            if (typeof this.props.onEnter === \"function\") {\n                this.props.onEnter(newText);\n            }\n            newText = '';\n        } else {\n            if (!this.props.locked) {\n                newText += keyName;\n            }\n        }\n\n        this.setState({ text: newText });\n    }\n\n    render() {\n        return (\n            <Hotkeys\n                keyName=\"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,backspace,enter\"\n                onKeyDown={this.onKeyDown.bind(this)}\n            >\n                <p className=\"output\">{this.state.text}<span className=\"cursor\">|</span></p>\n            </Hotkeys>\n        );\n    }\n}\n\nexport default Typer;\n","import Mapping from './Mapping';\n\n/**\n * The transcription mapping for hiragana.\n */\nclass HiraganaUtil extends Mapping {\n    constructor() {\n        super({\n            'n': 'ん',\n\n            'a': 'あ',\n            'i': 'い',\n            'u': 'う',\n            'e': 'え',\n            'o': 'お',\n\n            'ka': 'か',\n            'ki': 'き',\n            'ku': 'く',\n            'ke': 'け',\n            'ko': 'こ',\n\n            'sa': 'さ',\n            'shi': 'し',\n            'su': 'す',\n            'se': 'せ',\n            'so': 'そ',\n\n            'ta': 'た',\n            'chi': 'ち',\n            'tsu': 'つ',\n            'te': 'て',\n            'to': 'と',\n\n            'na': 'な',\n            'ni': 'に',\n            'nu': 'ぬ',\n            'ne': 'ね',\n            'no': 'の',\n\n            'ha': 'は',\n            'hi': 'ひ',\n            'fu': 'ふ',\n            'he': 'へ',\n            'ho': 'ほ',\n\n            'ma': 'ま',\n            'mi': 'み',\n            'mu': 'む',\n            'me': 'め',\n            'mo': 'も',\n\n            'ya': 'や',\n            'yu': 'ゆ',\n            'yo': 'よ',\n\n            'ra': 'ら',\n            'ri': 'り',\n            'ru': 'る',\n            're': 'れ',\n            'ro': 'ろ',\n\n            'wa': 'わ',\n            'wi': 'ゐ',\n            'we': 'ゑ',\n            'wo': 'を',\n        });\n    }\n}\n\nexport default HiraganaUtil;\n","\n/**\n * Two-way mapping utility class for kana transcription.\n */\nclass Mapping {\n    constructor(map) {\n        this.map = map;\n        this.reverseMap = {};\n\n        for (const key in map) {\n            this.reverseMap[this.map[key]] = key;\n        }\n    }\n\n    getByTranscription(transcript) {\n        if (transcript in this.map) {\n            return this.map[transcript];\n        } else {\n            console.warn('Trying to access non existent transcription.');\n            return '❌';\n        }\n    }\n\n    getByKana(kana) {\n        if (this.reverseMap[kana]) {\n            return this.reverseMap[kana];\n        } else {\n            console.warn('Trying to access non existent kana.');\n            return '❌';\n        }\n    }\n}\n\nexport default Mapping;\n","\n\nclass RandomUtil {\n    static calculateWeights(list) {\n        let weightTotal = 0;\n        let distribution = [];\n\n        for (let i = 0; i < list.length; i++) {\n            weightTotal += list[i];\n        }\n        for (let i = 0; i < list.length; i++) {\n            distribution.push(list[i] / weightTotal);\n        }\n\n        return distribution;\n    }\n\n    static getRandomIdByDistribution(distribution) {\n        let key = 0;\n        let selector = Math.random();\n        while (selector > 0) {\n            selector -= distribution[key];\n            key++;\n        }\n        key--;\n\n        return key;\n    }\n\n    static getRandomIdByWeights(list) {\n        const distribution = RandomUtil.calculateWeights(list);\n        return RandomUtil.getRandomIdByDistribution(distribution);\n    }\n\n    static getRandom(list) {\n        return list[Math.floor(Math.random() * list.length)];\n    }\n}\n\nexport default RandomUtil;\n","import React, { Component } from 'react';\nimport Kana from './Kana';\nimport Typer from './Typer';\nimport HiraganaUtil from '../utils/HiraganaUtil';\nimport RandomUtil from '../utils/RandomUtil';\n\nconst learningBlocks = [\n    [\"ka\",\"ki\",\"ku\",\"ke\",\"ko\"],\n    [\"sa\",\"shi\",\"su\",\"se\",\"so\"],\n    [\"ta\",\"chi\",\"tsu\",\"te\",\"to\"],\n    [\"na\",\"ni\",\"nu\",\"ne\",\"no\"],\n    [\"ha\",\"hi\",\"fu\",\"he\",\"ho\"],\n    [\"ma\",\"mi\",\"mu\",\"me\",\"mo\"],\n    [\"ya\",\"yu\",\"yo\"],\n    [\"ra\",\"ri\",\"ru\",\"re\",\"ro\"],\n    [\"wa\",\"wi\",\"we\",\"wo\"]\n];\n\nclass Hiragana extends Component {\n    \n    constructor(props) {\n        super(props);\n\n        const defaultStart = [\n            { transcription: 'n', solved: 0 },\n            { transcription: 'a', solved: 0 },\n            { transcription: 'e', solved: 0 },\n            { transcription: 'i', solved: 0 },\n            { transcription: 'o', solved: 0 },\n            { transcription: 'u', solved: 0 },\n        ];\n\n        this.hiragana = new HiraganaUtil();\n\n        try {\n            this.characters = JSON.parse(localStorage.getItem('hiragana')) || defaultStart;\n        } catch {\n            this.characters = defaultStart;\n        }\n\n        this.positive = ['👍🏻', '🍻', '🥂', '🏆', '🏅', '✅', '🆗', '🍖', '🎯', '🎉', '🎊'];\n        this.negative = ['❌','😦', '🦴', '❌', '🛑', '⛔️', '🚫', '⁉️', '⚠️', '☠️'];\n\n        const transcription = this.getRandomKana();\n\n        this.state = {\n            symbol: this.hiragana.getByTranscription(transcription),\n            transcription: transcription,\n            message: 'What is the transcription for:',\n            state: 'waiting',\n        };\n    }\n\n    kanaSolved() {\n        const id = this.characters.findIndex(x => x.transcription === this.state.transcription);\n        this.characters[id].solved++;\n\n        if (this.totalSolved() / this.characters.length >= Math.floor(this.characters.length * 1.25)) {\n            let block;\n            try {\n                block = JSON.parse(localStorage.getItem('hiraganaBlock') || \"0\");\n            } catch {\n                block = 0;\n            }\n\n            if (block < learningBlocks.length) {\n                const newKanas = learningBlocks[block].map((x) => {\n                    return {transcription: x, solved: 0};\n                });\n                \n                this.characters = this.characters.concat(newKanas);\n                block++;\n\n                localStorage.setItem('hiraganaBlock', block);\n            }\n        }\n\n        localStorage.setItem('hiragana', JSON.stringify(this.characters));\n    }\n\n    totalSolved() {\n        return this.characters.reduce((acc, x) => acc + x.solved, 0);\n    }\n\n    calculateWeights() {\n        const totalSolved = this.totalSolved();\n\n        const weights = this.characters.map((x) => {\n            if (totalSolved === 0) {\n                return 1;\n            }\n            if (x.solved === 0) {\n                return totalSolved * 2;\n            }\n            return totalSolved / x.solved;\n        });\n\n        return weights;\n    }\n\n    getRandomKana() {\n        const weights = this.calculateWeights();\n        let id = 0;\n        let counter = 0;\n        do {\n            id = RandomUtil.getRandomIdByWeights(weights);\n            counter++;\n        } while (counter < 5 && \n                this.state && \n                this.state.transcription === this.characters[id].transcription);\n\n        return this.characters[id].transcription;\n    }\n\n    onTyperEnter(str) {\n        if (this.state.state === 'waiting') {\n            if (str === this.state.transcription) {\n                this.kanaSolved();\n                this.setState({\n                    message: 'You\\'re right!', \n                    state: 'next',\n                    symbol: RandomUtil.getRandom(this.positive)\n                });\n            } else {\n                this.setState({ \n                    message: 'Wrong! ' + this.state.symbol + ' would be \"' + this.state.transcription + '\"', \n                    state: 'next',\n                    symbol: RandomUtil.getRandom(this.negative)\n                });\n            }\n        } else {\n            const transcription = this.getRandomKana();\n\n            this.setState({\n                message: 'What is the transcription for:',\n                state: 'waiting',\n                transcription: transcription,\n                symbol: this.hiragana.getByTranscription(transcription),\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <p>{this.state.message}</p>\n                <Kana value={this.state.symbol} />\n                <Typer locked={this.state.state === 'next'} onEnter={this.onTyperEnter.bind(this)} />\n            </div>\n        );\n    }\n}\n\nexport default Hiragana;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Hiragana from './components/Hiragana';\n\n/**\n * The main component of this application.\n */\nclass App extends Component {\n\n    /**\n     * Renders the kana trainer.\n     */\n    render() {\n        return (\n            <div className=\"App\">\n                <Hiragana/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}