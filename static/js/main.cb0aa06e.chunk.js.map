{"version":3,"sources":["components/Kana.js","utils/HiraganaUtil.js","utils/Mapping.js","components/Hiragana.js","components/Typer.js","App.js","index.js"],"names":["Kana","react_default","a","createElement","className","this","props","value","Component","HiraganaUtil","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","i","u","e","o","ka","ki","ku","ke","ko","sa","shi","su","se","so","ta","chi","tsu","te","to","na","ni","nu","ne","no","ha","hi","fu","he","ho","ma","mi","mu","me","mo","ya","yu","yo","ra","ri","ru","re","ro","wa","wi","we","wo","Mapping","map","key","reverseMap","transcript","console","warn","kana","Hiragana","_this","hiragana","src_components_Kana","getByTranscription","symbol","Typer","state","text","keyName","handle","newText","slice","onEnter","setState","es","onKeyDown","bind","App","str","components_Hiragana","src_components_Typer","onTyperEnter","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.cb0aa06e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Kana.css';\n\nclass Kana extends Component {\n    render() {\n        return (\n            <div className=\"kana\">\n                <p>\n                    {this.props.value}\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default Kana;\n","import Mapping from './Mapping';\n\nclass HiraganaUtil extends Mapping {\n  constructor() {\n      super({\n          'a': 'あ',\n          'i': 'い',\n          'u': 'う',\n          'e': 'え',\n          'o': 'お',\n        \n          'ka': 'か',\n          'ki': 'き',\n          'ku': 'く',\n          'ke': 'け',\n          'ko': 'こ',\n\n          'sa': 'さ',\n          'shi': 'し',\n          'su': 'す',\n          'se': 'せ',\n          'so': 'そ',\n\n          'ta': 'た',\n          'chi': 'ち',\n          'tsu': 'つ',\n          'te': 'て',\n          'to': 'と',\n          \n          'na': 'な',\n          'ni': 'に',\n          'nu': 'ぬ',\n          'ne': 'ね',\n          'no': 'の',\n\t\t\t\n          'ha': 'は',\n          'hi': 'ひ',\n          'fu': 'ふ',\n          'he': 'へ',\n          'ho': 'ほ',\n\t\t\t\t\n          'ma': 'ま',\n          'mi': 'み',\n          'mu': 'む',\n          'me': 'め',\n          'mo': 'も',\n\t\t\t\n          'ya': 'や',\n          'yu': 'ゆ',\n          'yo': 'よ',\n\t\t\t\t\n          'ra': 'ら',\n          'ri': 'り',\n          'ru': 'る',\n          're': 'れ',\n          'ro': 'ろ',\n\n          'wa': 'わ',\n          'wi': 'ゐ',\n          'we': 'ゑ',\n          'wo': 'を',\n      });\n  }\n}\n\nexport default HiraganaUtil;\n","\n\nclass Mapping {\n    constructor(map) {\n        this.map = map;\n        this.reverseMap = {};\n\n        for (const key in map) {\n            this.reverseMap[this.map[key]] = key;\n        }\n    }\n\n    getByTranscription(transcript) {\n        if (this.map[transcript]) {\n            return this.map[transcript];\n        } else {\n            console.warn('Trying to access non existent transcription.');\n            return '❌';\n        }\n    }\n\n    getByKana(kana) {\n        if (this.reverseMap[kana]) {\n            return this.reverseMap[kana];\n        } else {\n            console.warn('Trying to access non existent kana.');\n            return '❌';\n        }\n    }\n}\n\nexport default Mapping;\n","import React, { Component } from 'react';\nimport Kana from './Kana';\nimport HiraganaUtil from '../utils/HiraganaUtil';\n\nclass Hiragana extends Component {\n    constructor(props) {\n        super(props);\n\n        this.hiragana = new HiraganaUtil();\n    }\n    render() {\n        return (\n            <Kana value={this.hiragana.getByTranscription(this.props.symbol)} />\n        );\n    }\n}\n\nexport default Hiragana;\n","import React, { Component } from 'react';\nimport Hotkeys from 'react-hot-keys';\nimport './Typer.css';\n\nclass Typer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: '',\n        };\n    }\n\n    onKeyDown(keyName, e, handle) {\n        let newText = this.state.text;\n        if (keyName === 'backspace') {\n            newText = newText.slice(0, -1);\n        } else if (keyName === 'enter') {\n            if (typeof this.props.onEnter === \"function\") {\n                this.props.onEnter(newText);\n            }\n            newText = '';\n        } else {\n            newText += keyName;\n        }\n\n        this.setState({ text: newText });\n    }\n\n    render() {\n        return (\n            <Hotkeys\n                keyName=\"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,backspace,enter\"\n                onKeyDown={this.onKeyDown.bind(this)}\n            >\n                <p className=\"output\">{this.state.text}<span className=\"cursor\">|</span></p>\n            </Hotkeys>\n        );\n    }\n}\n\nexport default Typer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Hiragana from './components/Hiragana';\nimport Typer from './components/Typer';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            symbol: ''\n        };\n    }\n\n    onTyperEnter(str) {\n        this.setState({ symbol: str });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <p>What is the transcription for:</p>\n                <Hiragana symbol={this.state.symbol} />\n                <Typer onEnter={this.onTyperEnter.bind(this)} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}